input {
  eventlog {
    logfile => 'Application'
    tags => 'Win32-EventLog_System'
  }
  exec {
    command => "facter system_uptime --json"
    interval => 60
    tags => 'uptime'
  }
  wmi {
    query => "select * from Win32_PerfFormattedData_PerfOS_System"
    interval => 360
    tags => 'Win32_PerfFormattedData_PerfOS_System'
  }
  wmi {
    query => "select * from Win32_OperatingSystem"
    interval => 360
    tags => 'Win32_OperatingSystem'
  }
  wmi {
    query => "select * from Win32_PerfFormattedData_PerfOS_Processor where name = '_Total'"
    interval => 360
    tags => 'Win32_PerfFormattedData_PerfOS_Processor'
  }
  wmi {
    query => "select * from Win32_LogicalDisk"
    interval => 360
    tags  => 'Win32_LogicalDisk'
  }
}

filter {
  if "Win32_OperatingSystem" in [tags] {
    mutate {
      convert => [ "TotalVisibleMemorySize", "integer" ]
      convert => [ "FreePhysicalMemory", "integer" ]
      convert => [ "LastBootUpTime", "integer" ]
    }
    ruby { 
      code => "event['UsedMemory'] = (event['TotalVisibleMemorySize'] * 1024) - (event['FreePhysicalMemory'] * 1024)"
    }
  }
  if "Win32_PerfFormattedData_PerfOS_System" in [tags] {
    mutate {
      convert => [ "SystemUpTime", "integer" ]
    }
    ruby {
      code => "event['SystemUpTimeDays'] = event['SystemUpTime'] / 60 / 60 / 24"
    }
    ruby {
      code => "event['SystemUpTimeHours'] = event['SystemUpTime'] / 60 / 60"
    }
  }
  if "Win32_PerfFormattedData_PerfOS_Processor" in [tags] {
    mutate {
      convert => [ "PercentProcessorTime", "integer" ]
    }
  }  
  if "Win32_LogicalDisk" in [tags] {
    mutate {
      convert => [ "FreeSpace", "integer" ]
      convert => [ "Size", "integer" ]
    }
    ruby { 
      code => "event['UsedSpace'] = event['Size'] - event['FreeSpace']"
    } 
  }
}

output {
  #if "Win32_LogicalDisk" in [tags] {
    elasticsearch {
      cluster => "cluster-02"
    }
    stdout {
      codec => rubydebug
    }
  #}
}
